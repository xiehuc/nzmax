<?xml version="1.0" encoding="utf-8" ?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="main()" >
	<mx:ApplicationControlBar dock="true">
		<mx:ViewStack id="barView" width="100%">
			<mx:HBox id="listHead">
				<mx:Button label="添加" click="view.selectedChild=installPage;barView.selectedChild=installHead" />
				<mx:Button label="删除" click="deleteClick()" />
				<mx:Button label="设置" click="view.selectedChild=settingPage;barView.selectedChild=settingHead" />
			</mx:HBox>
			<mx:Canvas id="blankHead">
			</mx:Canvas>
			<mx:HBox id="settingHead">
				<mx:Label text="设置:" />
				<mx:Button label="保存" click="saveConfig()" />
				<mx:Button label="返回" click="view.selectedChild=listPage;barView.selectedChild=listHead" />
			</mx:HBox>
			<mx:HBox id="installHead">
				<mx:Label text="安装:"/>
				<mx:Button id="installBtn" label="浏览" click="installBrowse()" />
				<mx:Button label="取消" click="install_cancel()" />
			</mx:HBox>
			<mx:HBox id="deleteHead">
				<mx:Label text="确定要删除该剧本吗？"/>
				<mx:Button label="确定" click="deleteScript();deleteCancel()" />
				<mx:Button label="取消" click="deleteCancel();" />
			</mx:HBox>
		</mx:ViewStack>
	</mx:ApplicationControlBar>

	<mx:ViewStack id="view" width="100%" height="100%">
			<mx:VBox id="listPage">
				<mx:List id="list" width="100%" height="100%" />
				<!--mx:TextArea id="ta"/-->
			</mx:VBox>
		<mx:VBox id="installPage" width="100%">
			<mx:HBox>
				<mx:Label text="路径:" width="100%" />
				<mx:TextInput id="installPath" />
			</mx:HBox>
			<mx:Form id="installInformationForm" visible="false">
				<mx:FormItem label="Logo:">
					<mx:Canvas id="infoLogo" height="64" />
				</mx:FormItem>
				<mx:FormItem label="name:">
					<mx:TextInput id="infoName" editable="false" width="100%"/>
				</mx:FormItem>
				<mx:FormItem label="author:">
					<mx:TextInput id="infoAuthor" editable="false" width="100%"/>
				</mx:FormItem>
				<mx:FormItem label="playTime:">
					<mx:TextInput id="infoPlayTime" editable="false" width="100%"/>
				</mx:FormItem>
				<mx:FormItem label="introduce:">
					<mx:TextInput id="infoIntroduce" editable="false" width="100%" height="60" />
				</mx:FormItem>
			</mx:Form>
		</mx:VBox>
		<mx:VBox id="installProgressPage" creationComplete="installProgress_creation_complete()">
			<mx:VBox id="installFinish" visible="false">
				<mx:Image source="@Embed('../lib/install.png')"/>
				<mx:Button label="安装其他剧本" click="view.selectedChild=installPage;barView.selectedChild = installHead;install_cancel()" />
				<mx:Button label="返回" click="view.selectedChild=listPage" />
			</mx:VBox>
			<mx:Spacer height="100%"/>
			<mx:ProgressBar id="installProgress" mode="manual" />
		</mx:VBox>
		<mx:VBox id="settingPage" width="100%" height="100%" creationComplete="setPageInit()">
			<mx:HBox width="100%" height="100%">
				<mx:List id="setList" itemClick="setListClick()" height="100%" />
				<mx:ViewStack id="setView" width="100%" height="100%">
					<mx:Form creationComplete="commonSetInit()">
						<mx:FormItem label="ControlPath:">
							<mx:TextInput id="ControlPathInput"  data="control" change="commonSetChange(event)" />
						</mx:FormItem>
						<mx:FormItem label="FontFamily:">
							<mx:TextInput id="FontFamilyInput" data="family" change="commonSetChange(event)" />
						</mx:FormItem>
						<mx:FormItem label="FontSize:">
							<mx:TextInput id="FontSizeInput" data="size" change="commonSetChange(event)" />
						</mx:FormItem>
					</mx:Form>
					<mx:Form creationComplete="keyMapInit()">
						<mx:FormItem label="确定">
							<mx:Button id="btn_1" data="Confirm" click="btn_click(event)" toggle="true" />
						</mx:FormItem>
						<mx:FormItem label="取消">
							<mx:Button id="btn_2" data="Cancel" click="btn_click(event)" toggle="true" />
						</mx:FormItem>
						<mx:FormItem label="选择">
							<mx:Button id="btn_3" data="Select" click="btn_click(event)" toggle="true"  />
						</mx:FormItem>
						<mx:FormItem label="菜单">
							<mx:Button id="btn_4" data="Menu" click="btn_click(event)" toggle="true" />
						</mx:FormItem>
						<mx:FormItem label="L按钮">
							<mx:Button id="btn_5" data="LButton" click="btn_click(event)" toggle="true" />
						</mx:FormItem>
						<mx:FormItem label="R按钮">
							<mx:Button id="btn_6" data="RButton" click="btn_click(event)" toggle="true" />
						</mx:FormItem>
						<mx:FormItem label="Left">
							<mx:Button id="btn_7" data="Left" click="btn_click(event)" toggle="true" />
						</mx:FormItem>
						<mx:FormItem label="Right">
							<mx:Button id="btn_8" data="Right" click="btn_click(event)" toggle="true" />
						</mx:FormItem>
						<mx:FormItem label="Up">
							<mx:Button id="btn_9" data="Up" click="btn_click(event)" toggle="true" />
						</mx:FormItem>
						<mx:FormItem label="Down">
							<mx:Button id="btn_10" data="Down" click="btn_click(event)" toggle="true" />
						</mx:FormItem>
					</mx:Form>

				</mx:ViewStack>
			</mx:HBox>
		</mx:VBox>
	</mx:ViewStack>
	<mx:Script>
		<![CDATA[
			import codex.assets.FileType;
			import FileManage;
			import flash.display.DisplayObject;
			import flash.filesystem.File;
			import flash.filesystem.FileMode;
			import flash.filesystem.FileStream;
			import flash.net.FileFilter;
			import flash.net.URLLoader;
			import flash.net.URLLoaderDataFormat;
			import flash.net.URLRequest;
			import flash.utils.ByteArray;
			import gs.TweenLite;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import flash.events.Event;
			import mx.controls.Button;
			import flash.events.MouseEvent;
			import flash.events.KeyboardEvent;
			import mx.core.UIComponent;
			import org.nochump.zip.ZipReader;
			
			private var currentButton:Button;
			//install Component
			private var fileFilter:FileFilter;
			private var installFile:File;
			private var zipLoader:URLLoader;
			private var zipReader:ZipReader;
			private var infoXML:XML;
			private var installLength:int;
			private var installIndex:int;
			private var folderName:String;
			private var installPathFile:File;//script文件夹
			private var scriptPathFile:File;//script的某个子文件夹
			//config Component
			private var configStream:FileStream;
			private var configFile:File;
			private var configXML:XML;			
			
			private function main():void
			{
				fileFilter = new FileFilter("NZMAX Installer","*.nzi");
				installFile = new File();
				installFile.addEventListener(Event.SELECT, install_select);
				zipLoader = new URLLoader();
				zipLoader.dataFormat = URLLoaderDataFormat.BINARY;
				zipLoader.addEventListener(Event.COMPLETE, ziploader_complete);
				
				var dir:String = FileManage.getParentPath(File.applicationDirectory.nativePath);
				FileManage.setDirectory(new File(dir+"\\script"));
				list.dataProvider = FileManage.data;
				installPathFile = new File(dir + "\\script");
				var url:URLLoader = new URLLoader();
				url.load(new URLRequest(dir+"\\config.xml"));
				url.addEventListener(Event.COMPLETE, config_complete);
				configFile = new File(dir + "\\config.xml");
				configStream = new FileStream();
			}
			
			private function config_complete(e:Event):void 
			{
				configXML = new XML(e.currentTarget.data);
			}
			private function installBrowse():void
			{
				if(installBtn.label=="浏览"){
					installFile.browse([fileFilter]);
				}else {
					view.selectedChild = installProgressPage;
					barView.selectedChild = blankHead;
					installLength = zipReader.names.length;
					installIndex = 0;
					folderName = infoXML.folder;
					if (installPathFile.resolvePath(folderName).exists) {
						var i:int = 1;
						while (installPathFile.resolvePath(folderName + i).exists) {
							i++;
						}
						scriptPathFile = installPathFile.resolvePath(folderName + i);
					}else {
						scriptPathFile = installPathFile.resolvePath(folderName);
					}
					zipReader.writeFile(zipReader.names[0], scriptPathFile);
				}
			}
			private function install_select(e:Event):void 
			{
				installBtn.label = "继续";
				installPath.text = e.currentTarget.nativePath;
				
				zipLoader.load(new URLRequest(installFile.nativePath));
			}
			private function install_cancel():void
			{
				if (installBtn.label == "继续") {
					installPath.text = "";
					installBtn.label = "浏览";
					installInformationForm.visible = false;
				}else {
					view.selectedChild = listPage;
					barView.selectedChild = listHead;
				}
			}
			private function ziploader_complete(e:Event):void 
			{
				installInformationForm.visible = true;
				zipReader = new ZipReader(e.currentTarget.data as ByteArray);
				zipReader.addEventListener(ZipReader.WRITE_COMPLETE, continue_write_file);
				infoXML = zipReader.getObject("info.plist", FileType.XMLType);
				
				infoName.text = infoXML.name;
				infoAuthor.text = infoXML.author;
				infoPlayTime.text = infoXML.playTime;
				infoIntroduce.text = infoXML.introduce;
				var image:UIComponent = new UIComponent();
				image.addChild(zipReader.getObject(infoXML.logo));
				infoLogo.removeAllChildren();
				infoLogo.addChild(image);
			}
			private function continue_write_file(e:Event):void 
			{
				if(installIndex <installLength -1){
					installIndex ++;
					installProgress.setProgress(installIndex, installLength);
					installProgress.label = "Progress " + Math.round(installIndex / installLength * 100) + "%";
					zipReader.writeFile(zipReader.names[installIndex],scriptPathFile);
				}else {
					installFinish.visible = true;
					installProgress.visible = false;
					FileManage.rescan();
				}

			}
			private function installProgress_creation_complete():void
			{
				installProgress.setProgress(installIndex, installLength);
				installProgress.label = "Progress " + Math.round(installIndex / installLength * 100)+"%";
			}
			
			private function deleteClick():void
			{
				if (list.selectedIndex != -1) {
					barView.selectedChild = deleteHead;
					list.enabled = false;
				}
			}
			private function deleteScript():void
			{
				var f:File = new File(list.selectedItem.data.nativePath);
				f.deleteDirectory(true);
				FileManage.rescan();
			}
			private function deleteCancel():void
			{
				list.enabled = true;
				barView.selectedChild = listHead;
			}
			
			private function setPageInit():void
			{
				var data:ArrayCollection = new ArrayCollection();
				data.addItem( { label:"常用设置"} );
				data.addItem( { label:"按键映射"} );
				setList.dataProvider = data;
			}
			private function commonSetInit():void
			{
				ControlPathInput.text = configXML.common.control.toString();
				FontSizeInput.text = configXML.common.size;
				FontFamilyInput.text = configXML.common.family;
			}
			private function setListClick():void
			{
				setView.selectedIndex = setList.selectedIndex;
			}
			private function keyMapInit():void
			{
				var ar:XMLList = configXML.keyMap.children();
				for (var i:int = 1; i <= 10; i++) {
					this["btn_"+i].label = getLabel(ar[i-1].toString());
				}
			}
			private function saveConfig():void
			{
				var str:String = configXML.toXMLString();
				str = str.replace(/\n/g, "\r\n");
				configStream.open(configFile, FileMode.WRITE);
				configStream.writeUTFBytes(str);
				configStream.close();
			}
			private function btn_click(event:MouseEvent):void
			{
				currentButton = event.currentTarget as Button;
				this.addEventListener(KeyboardEvent.KEY_UP, key_event);
			}
			private function getLabel(keyCode:int):String
			{
				var str:String;
				switch(keyCode) {
					case 13:
						str = "Enter";
					break;
					case 8:
						str = "Select";
					break;
					case 37:
						str="Left"
					break;
					case 38:
						str = "Up";
					break;
					case 39:
						str="Right"
					break;
					case 40:
						str = "Down";
					break;
					case 32:
						str = "Space";
					break;
					default:
						str = String.fromCharCode(keyCode);
					break;
				}
				return str;
			}
			private function commonSetChange(event:Event):void
			{
				configXML.common[event.currentTarget.data] = event.currentTarget.text;
			}
			private function key_event(event:KeyboardEvent):void
			{
				currentButton.selected = false;
				trace(event.keyCode,event.charCode);
				currentButton.label = getLabel(event.keyCode);
				configXML.keyMap[currentButton.data] = event.keyCode;
				this.removeEventListener(KeyboardEvent.KEY_UP,key_event);
			}
			private function blank():void
			{
			}
			
		]]>
	</mx:Script>
</mx:Application>